{"version":3,"sources":["App.tsx","features/counter/counterAPI.ts","features/counter/counterSlice.ts","app/store.ts","serviceWorker.ts","index.tsx"],"names":["IconStyle","IconSize","IconType","IconContainerSize","Icon","name","style","Solid","size","Normal","type","containerSize","left","className","App","role","href","id","target","rel","Brands","Large","fetchCount","amount","Promise","resolve","setTimeout","data","incrementAsync","createAsyncThunk","a","response","counterSlice","createSlice","initialState","value","status","reducers","increment","state","decrement","incrementByAmount","action","payload","extraReducers","builder","addCase","pending","fulfilled","actions","store","configureStore","reducer","counter","counterReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ef8053a1.chunk.js","sourcesContent":["import React from 'react';\n// import logo from './logo.svg';\n// import { Counter } from './features/counter/Counter';\n// import './App.css';\n\nexport enum IconStyle {\n  Solid = 'fas',\n  Brands = 'fab'\n}\n\nexport enum IconSize {\n  Normal = '',\n  Large = 'fa-lg',\n  ExtraLarge = 'fa-2x'\n}\n\nexport enum IconType {\n  FileIcon = 'file-icon',\n  Icon = 'icon',\n  PanelIcon = 'panel-icon'\n}\n\nexport enum IconContainerSize {\n  Small = 'is-small',\n  Normal = '',\n  Medium = 'is-medium',\n  Large = 'is-large'\n}\n\nexport interface IconProps {\n  name: string;\n  style?: IconStyle;\n  size?: IconSize;\n  type?: IconType;\n  containerSize?: IconContainerSize;\n  left?: boolean;\n}\n\nexport const Icon = ({\n  name,\n  style = IconStyle.Solid,\n  size = IconSize.Normal,\n  type = IconType.Icon,\n  containerSize = IconContainerSize.Normal,\n  left = false\n}: IconProps) => (\n  <span className={`${type} ${containerSize} ${left ? 'is-left' : ''}`}>\n    <i className={`${style} fa-${name} ${size}`}></i>\n  </span>\n);\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <nav className=\"navbar is-spaced\" role=\"navigation\" aria-label=\"main navigation\">\n        <div className=\"container\">\n          <div className=\"navbar-brand\">\n            <a\n              href=\"/#\"\n              role=\"button\"\n              className=\"navbar-burger\"\n              aria-label=\"menu\"\n              aria-expanded=\"false\"\n              data-target=\"navbarBasicExample\"\n            >\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n              <span aria-hidden=\"true\"></span>\n            </a>\n          </div>\n\n          <div id=\"navbarBasicExample\" className=\"navbar-menu\">\n            {/* <div className=\"navbar-start\">\n              <a className=\"navbar-item\">Home</a>\n              <a className=\"navbar-item\">Documentation</a>\n              <div className=\"navbar-item has-dropdown is-hoverable\">\n                <a className=\"navbar-link\">More</a>\n                <div className=\"navbar-dropdown\">\n                  <a className=\"navbar-item\">About</a>\n                  <a className=\"navbar-item\">Jobs</a>\n                  <a className=\"navbar-item\">Contact</a>\n                  <hr className=\"navbar-divider\" />\n                  <a className=\"navbar-item\">Report an issue</a>\n                </div>\n              </div>\n            </div> */}\n            <div className=\"navbar-end\">\n              <a\n                className=\"navbar-item\"\n                href=\"https://github.com/dillonredding\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Icon name=\"github\" style={IconStyle.Brands} size={IconSize.Large} />\n              </a>\n              <a\n                className=\"navbar-item\"\n                href=\"https://twitter.com/dillon_redding\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Icon name=\"twitter\" style={IconStyle.Brands} size={IconSize.Large} />\n              </a>\n              <a\n                className=\"navbar-item\"\n                href=\"https://medium.com/@dillonredding\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n              >\n                <Icon name=\"medium\" style={IconStyle.Brands} size={IconSize.Large} />\n              </a>\n            </div>\n          </div>\n        </div>\n      </nav>\n      {/* <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <Counter />\n        <p>\n          Edit <code>src/App.tsx</code> and save to reload.\n        </p>\n        <span>\n          <span>Learn </span>\n          <a\n            className=\"App-link\"\n            href=\"https://reactjs.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux\n          </a>\n          <span>, </span>\n          <a\n            className=\"App-link\"\n            href=\"https://redux-toolkit.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            Redux Toolkit\n          </a>\n          ,<span> and </span>\n          <a\n            className=\"App-link\"\n            href=\"https://react-redux.js.org/\"\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n          >\n            React Redux\n          </a>\n        </span>\n      </header> */}\n    </div>\n  );\n}\n\nexport default App;\n","// A mock function to mimic making an async request for data\nexport function fetchCount(amount = 1) {\n  return new Promise<{ data: number }>((resolve) =>\n    setTimeout(() => resolve({ data: amount }), 500)\n  );\n}\n","import { createAsyncThunk, createSlice, PayloadAction } from '@reduxjs/toolkit';\nimport { RootState, AppThunk } from '../../app/store';\nimport { fetchCount } from './counterAPI';\n\nexport interface CounterState {\n  value: number;\n  status: 'idle' | 'loading' | 'failed';\n}\n\nconst initialState: CounterState = {\n  value: 0,\n  status: 'idle',\n};\n\n// The function below is called a thunk and allows us to perform async logic. It\n// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This\n// will call the thunk with the `dispatch` function as the first argument. Async\n// code can then be executed and other actions can be dispatched. Thunks are\n// typically used to make async requests.\nexport const incrementAsync = createAsyncThunk(\n  'counter/fetchCount',\n  async (amount: number) => {\n    const response = await fetchCount(amount);\n    // The value we return becomes the `fulfilled` action payload\n    return response.data;\n  }\n);\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  // The `reducers` field lets us define reducers and generate associated actions\n  reducers: {\n    increment: (state) => {\n      // Redux Toolkit allows us to write \"mutating\" logic in reducers. It\n      // doesn't actually mutate the state because it uses the Immer library,\n      // which detects changes to a \"draft state\" and produces a brand new\n      // immutable state based off those changes\n      state.value += 1;\n    },\n    decrement: (state) => {\n      state.value -= 1;\n    },\n    // Use the PayloadAction type to declare the contents of `action.payload`\n    incrementByAmount: (state, action: PayloadAction<number>) => {\n      state.value += action.payload;\n    },\n  },\n  // The `extraReducers` field lets the slice handle actions defined elsewhere,\n  // including actions generated by createAsyncThunk or in other slices.\n  extraReducers: (builder) => {\n    builder\n      .addCase(incrementAsync.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(incrementAsync.fulfilled, (state, action) => {\n        state.status = 'idle';\n        state.value += action.payload;\n      });\n  },\n});\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions;\n\n// The function below is called a selector and allows us to select a value from\n// the state. Selectors can also be defined inline where they're used instead of\n// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`\nexport const selectCount = (state: RootState) => state.counter.value;\n\n// We can also write thunks by hand, which may contain both sync and async logic.\n// Here's an example of conditionally dispatching actions based on current state.\nexport const incrementIfOdd = (amount: number): AppThunk => (\n  dispatch,\n  getState\n) => {\n  const currentValue = selectCount(getState());\n  if (currentValue % 2 === 1) {\n    dispatch(incrementByAmount(amount));\n  }\n};\n\nexport default counterSlice.reducer;\n","import { configureStore, ThunkAction, Action } from '@reduxjs/toolkit';\nimport counterReducer from '../features/counter/counterSlice';\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n  },\n});\n\nexport type AppDispatch = typeof store.dispatch;\nexport type RootState = ReturnType<typeof store.getState>;\nexport type AppThunk<ReturnType = void> = ThunkAction<\n  ReturnType,\n  RootState,\n  unknown,\n  Action<string>\n>;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}